{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_ALLERGIES, GET_ALLERGY, ALLERGY_ERROR, DELETE_ALLERGY, ADD_ALLERGY } from './types'; // Get allergies\n\nexport const getAllergies = () => async dispatch => {\n  const res = await api.get('/allergies');\n  dispatch({\n    type: GET_ALLERGIES,\n    payload: res.data\n  });\n}; // Delete allergie\n\nexport const deleteAllergy = id => async dispatch => {\n  try {\n    await api.delete(`/allergies/${id}`);\n    dispatch({\n      type: DELETE_ALLERGY,\n      payload: id\n    });\n    dispatch(setAlert('Record Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: ALLERGY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add allergy\n\nexport const addAllergy = formData => async dispatch => {\n  try {\n    const res = await api.post('/allergies', formData);\n    dispatch({\n      type: ADD_ALLERGY,\n      payload: res.data\n    });\n    dispatch(setAlert('Record Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: ALLERGY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getAllergy = id => async dispatch => {\n  try {\n    const res = await api.get(`/allergies/${id}`);\n    dispatch({\n      type: GET_ALLERGY,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ALLERGY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/praba/OneDrive/Desktop/wd qognition/client/src/actions/allergy.js"],"names":["api","setAlert","GET_ALLERGIES","GET_ALLERGY","ALLERGY_ERROR","DELETE_ALLERGY","ADD_ALLERGY","getAllergies","dispatch","res","get","type","payload","data","deleteAllergy","id","delete","err","msg","response","statusText","status","addAllergy","formData","post","getAllergy"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,aAHJ,EAIIC,cAJJ,EAKIC,WALJ,QAMO,SANP,C,CAQA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAEhD,QAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAQ,YAAR,CAAlB;AAEAF,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET,aADC;AAEPU,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,GAAD,CAAR;AAIH,CARM,C,CAYP;;AACA,OAAO,MAAMC,aAAa,GAAGC,EAAE,IAAI,MAAMP,QAAN,IAAkB;AACnD,MAAI;AACF,UAAMR,GAAG,CAACgB,MAAJ,CAAY,cAAaD,EAAG,EAA5B,CAAN;AAEAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,cADC;AAEPO,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACP,QAAQ,CAAC,gBAAD,EAAmB,SAAnB,CAAT,CAAR;AACD,GATD,CASE,OAAOgB,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,aADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMC,UAAU,GAAGC,QAAQ,IAAI,MAAMf,QAAN,IAAkB;AACtD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,GAAG,CAACwB,IAAJ,CAAS,YAAT,EAAuBD,QAAvB,CAAlB;AAEAf,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEL,WADC;AAEPM,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACP,QAAQ,CAAC,gBAAD,EAAmB,SAAnB,CAAT,CAAR;AACD,GATD,CASE,OAAOgB,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,aADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMI,UAAU,GAAGV,EAAE,IAAI,MAAMP,QAAN,IAAkB;AAChD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAS,cAAaK,EAAG,EAAzB,CAAlB;AAEAP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOI,GAAP,EAAY;AACZT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,aADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAdM","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n    GET_ALLERGIES,\r\n    GET_ALLERGY,\r\n    ALLERGY_ERROR,\r\n    DELETE_ALLERGY,\r\n    ADD_ALLERGY\r\n} from './types';\r\n\r\n// Get allergies\r\nexport const getAllergies = () => async dispatch => {\r\n  \r\n    const res = await api.get('/allergies');\r\n\r\n    dispatch({\r\n      type: GET_ALLERGIES,\r\n      payload: res.data\r\n    });\r\n};\r\n\r\n\r\n\r\n// Delete allergie\r\nexport const deleteAllergy = id => async dispatch => {\r\n  try {\r\n    await api.delete(`/allergies/${id}`);\r\n\r\n    dispatch({\r\n      type: DELETE_ALLERGY,\r\n      payload: id\r\n    });\r\n\r\n    dispatch(setAlert('Record Removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ALLERGY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add allergy\r\nexport const addAllergy = formData => async dispatch => {\r\n  try {\r\n    const res = await api.post('/allergies', formData);\r\n\r\n    dispatch({\r\n      type: ADD_ALLERGY,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert('Record Created', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ALLERGY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get post\r\nexport const getAllergy = id => async dispatch => {\r\n  try {\r\n    const res = await api.get(`/allergies/${id}`);\r\n\r\n    dispatch({\r\n      type: GET_ALLERGY,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ALLERGY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}