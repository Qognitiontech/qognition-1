{"ast":null,"code":"import { GET_IMMUNIZES, IMMUNIZE_ERROR, DELETE_IMMUNIZE, ADD_IMMUNIZE, GET_IMMUNIZE } from '../actions/types';\nconst initialState = {\n  immunizes: [],\n  immunize: null,\n  loading: true,\n  error: {}\n};\n\nfunction immunizeReducer(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_IMMUNIZES:\n      return { ...state,\n        immunizes: payload,\n        loading: false\n      };\n\n    case GET_IMMUNIZE:\n      return { ...state,\n        immunize: payload,\n        loading: false\n      };\n\n    case ADD_IMMUNIZE:\n      return { ...state,\n        immunizes: [payload, ...state.immunizes],\n        loading: false\n      };\n\n    case DELETE_IMMUNIZE:\n      return { ...state,\n        immunizes: state.immunize.filter(immunize => immunize._id !== payload),\n        loading: false\n      };\n\n    case IMMUNIZE_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default immunizeReducer;","map":{"version":3,"sources":["C:/Users/praba/OneDrive/Desktop/wd qognition/client/src/reducers/immunize.js"],"names":["GET_IMMUNIZES","IMMUNIZE_ERROR","DELETE_IMMUNIZE","ADD_IMMUNIZE","GET_IMMUNIZE","initialState","immunizes","immunize","loading","error","immunizeReducer","state","action","type","payload","filter","_id"],"mappings":"AAAA,SACIA,aADJ,EAEEC,cAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,YALF,QAMS,kBANT;AAQE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;;AAOA,SAASC,eAAT,CAAyBC,KAAK,GAAGN,YAAjC,EAA+CO,MAA/C,EAAuD;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKb,aAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,SAAS,EAAEQ,OAFN;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKJ,YAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,QAAQ,EAAEO,OAFL;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,YAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELL,QAAAA,SAAS,EAAE,CAACQ,OAAD,EAAU,GAAGH,KAAK,CAACL,SAAnB,CAFN;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKN,eAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,SAAS,EAAEK,KAAK,CAACJ,QAAN,CAAeQ,MAAf,CAAuBR,QAAD,IAAcA,QAAQ,CAACS,GAAT,KAAiBF,OAArD,CAFN;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,cAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,KAAK,EAAEK,OAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF;AACE,aAAOG,KAAP;AAhCJ;AAkCD;;AAED,eAAeD,eAAf","sourcesContent":["import {\r\n    GET_IMMUNIZES,\r\n  IMMUNIZE_ERROR,\r\n  DELETE_IMMUNIZE,\r\n  ADD_IMMUNIZE,\r\n  GET_IMMUNIZE\r\n  } from '../actions/types';\r\n  \r\n  const initialState = {\r\n    immunizes: [],\r\n    immunize: null,\r\n    loading: true,\r\n    error: {}\r\n  };\r\n  \r\n  function immunizeReducer(state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case GET_IMMUNIZES:\r\n        return {\r\n          ...state,\r\n          immunizes: payload,\r\n          loading: false\r\n        };\r\n      case GET_IMMUNIZE:\r\n        return {\r\n          ...state,\r\n          immunize: payload,\r\n          loading: false\r\n        };\r\n      case ADD_IMMUNIZE:\r\n        return {\r\n          ...state,\r\n          immunizes: [payload, ...state.immunizes],\r\n          loading: false\r\n        };\r\n      case DELETE_IMMUNIZE:\r\n        return {\r\n          ...state,\r\n          immunizes: state.immunize.filter((immunize) => immunize._id !== payload),\r\n          loading: false\r\n        };\r\n      case IMMUNIZE_ERROR:\r\n        return {\r\n          ...state,\r\n          error: payload,\r\n          loading: false\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default immunizeReducer;\r\n  "]},"metadata":{},"sourceType":"module"}