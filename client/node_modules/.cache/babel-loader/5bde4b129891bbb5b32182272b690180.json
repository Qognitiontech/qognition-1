{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_IMMUNIZES, IMMUNIZE_ERROR, DELETE_IMMUNIZE, ADD_IMMUNIZE, GET_IMMUNIZE } from './types'; // Get immunize\n\nexport const getImmunizes = () => async dispatch => {\n  try {\n    const res = await api.get('/immunize');\n    dispatch({\n      type: GET_IMMUNIZES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: IMMUNIZE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deleteImmunize = id => async dispatch => {\n  try {\n    await api.delete(`/immunize/${id}`);\n    dispatch({\n      type: DELETE_IMMUNIZE,\n      payload: id\n    });\n    dispatch(setAlert('Record Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: IMMUNIZE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n\nexport const addImmunize = formData => async dispatch => {\n  try {\n    const res = await api.post('/immunize', formData);\n    dispatch({\n      type: ADD_IMMUNIZE,\n      payload: res.data\n    });\n    dispatch(setAlert('Immunization Record Inserted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: IMMUNIZE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getImmunize = id => async dispatch => {\n  try {\n    const res = await api.get(`/immunize/${id}`);\n    dispatch({\n      type: GET_IMMUNIZE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: IMMUNIZE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/praba/OneDrive/Desktop/wd qognition/client/src/actions/immunize.js"],"names":["api","setAlert","GET_IMMUNIZES","IMMUNIZE_ERROR","DELETE_IMMUNIZE","ADD_IMMUNIZE","GET_IMMUNIZE","getImmunizes","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","deleteImmunize","id","delete","addImmunize","formData","post","getImmunize"],"mappings":"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","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_IMMUNIZES,\r\n  IMMUNIZE_ERROR,\r\n  DELETE_IMMUNIZE,\r\n  ADD_IMMUNIZE,\r\n  GET_IMMUNIZE\r\n} from './types';\r\n\r\n// Get immunize\r\nexport const getImmunizes = () => async dispatch => {\r\n  try {\r\n    const res = await api.get('/immunize');\r\n\r\n    dispatch({\r\n      type: GET_IMMUNIZES,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: IMMUNIZE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Delete post\r\nexport const deleteImmunize = id => async dispatch => {\r\n  try {\r\n    await api.delete(`/immunize/${id}`);\r\n\r\n    dispatch({\r\n      type: DELETE_IMMUNIZE,\r\n      payload: id\r\n    });\r\n\r\n    dispatch(setAlert('Record Removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: IMMUNIZE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Add post\r\nexport const addImmunize = formData => async dispatch => {\r\n  try {\r\n    const res = await api.post('/immunize', formData);\r\n\r\n    dispatch({\r\n      type: ADD_IMMUNIZE,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert('Immunization Record Inserted', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: IMMUNIZE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// Get post\r\nexport const getImmunize = id => async dispatch => {\r\n  try {\r\n    const res = await api.get(`/immunize/${id}`);\r\n\r\n    dispatch({\r\n      type: GET_IMMUNIZE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: IMMUNIZE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}